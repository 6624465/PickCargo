@model IEnumerable<PickC.Internal2.ViewModals.TripMonitorVm>
@{
    ViewBag.Title = "Index";

    var temp = Model;
}
@section seccss{
    <style type="text/css">
        #map {
            height: 380px;
            width: 100%;
            margin: 0px;
            padding: 0px;
        }
    </style>
}
<section class="content">
    <div class="row">
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3>150</h3>
                    <p>Current Bookings</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bag"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-green">
                <div class="inner">
                    <h3>53<sup style="font-size: 20px">%</sup></h3>
                    <p>Total Trips</p>
                </div>
                <div class="icon">
                    <i class="ion ion-stats-bars"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-yellow">
                <div class="inner">
                    <h3>44</h3>
                    <p>Loggedin Drivers</p>
                </div>
                <div class="icon">
                    <i class="ion ion-person-add"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-red">
                <div class="inner">
                    <h3>65</h3>
                    <p>Completed Trips</p>
                </div>
                <div class="icon">
                    <i class="ion ion-pie-graph"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="ion ion-ios-people-outline"></i></a>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="map" style="border: 1px solid rgba(255,255,255,0.15);"></div>
        </div>
    </div>
</section>
@section secscripts{
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD7WVBL9AmhKs1QAr4x7mArA2mKZY-9nUo&v=3.exp&libraries=places&sensor=true"></script>
    <script type="text/javascript">
        var MapPoints = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))';
        var MY_MAPTYPE_ID = 'custom_style';
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();
        var map;

        var hyd = new google.maps.LatLng(17.23, 78.27);
        var mapOptions = {
            zoom: 15,
            center: hyd,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        function initialize() {
            directionsDisplay = new google.maps.DirectionsRenderer({ suppressMarkers: true });

            if (jQuery('#map').length > 0) {

                var locations = jQuery.parseJSON(MapPoints);

                map = new google.maps.Map(document.getElementById('map'), {
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false
                });
                directionsDisplay.setMap(mapOptions);

                var infowindow = new google.maps.InfoWindow();
                var flightPlanCoordinates = [];
                var bounds = new google.maps.LatLngBounds();

                for (i = 0; i < locations.length; i++) {
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(locations[i].address.lat, locations[i].address.lng),
                        map: map,
                        icon: '@Url.Content("~/images/truck.png")'
                    });
                    flightPlanCoordinates.push(marker.getPosition());
                    bounds.extend(marker.position);

                    google.maps.event.addListener(marker, 'click', (function (marker, i) {
                        return function () {
                            infowindow.setContent(locations[i]['title']);
                            infowindow.open(map, marker);
                        }
                    })(marker, i));
                }

                map.fitBounds(bounds);
                /* polyline
                    var flightPath = new google.maps.Polyline({
                        map: map,
                        path: flightPlanCoordinates,
                        strokeColor: "#FF0000",
                        strokeOpacity: 1.0,
                        strokeWeight: 2
                    }); */
                // directions service
                var start = flightPlanCoordinates[0];
                var end = flightPlanCoordinates[flightPlanCoordinates.length - 1];
                var waypts = [];
                for (var i = 1; i < flightPlanCoordinates.length - 1; i++) {
                    waypts.push({
                        location: flightPlanCoordinates[i],
                        stopover: true
                    });
                }
                //calcRoute(start, end, waypts);
            }
        }

        /*
        function calcRoute(start, end, waypts) {
            var request = {
                origin: start,
                destination: end,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                    var route = response.routes[0];
                    
                    var summaryPanel = document.getElementById('directions_panel');
                    summaryPanel.innerHTML = '';                    
                    for (var i = 0; i < route.legs.length; i++) {
                        var routeSegment = i + 1;
                        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment + '</b><br>';
                        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                    }
                }
            });
        }
        */
        google.maps.event.addDomListener(window, 'load', initialize);

        
        $(function () {
            Looping();
        });

        function Looping() {
            setTimeout(function () {
                var promise = GetTripMonitorData();
                $.when(promise).done(function (data) {
                    MapPoints = JSON.stringify(data);
                    initialize();
                    Looping();
                });
            }, 1000 * 60);
        }

        function GetTripMonitorData() {
            var def = $.Deferred();
            $.ajax({
                url: '@Url.Content("~/Dashboard/GetTripMonitorInfo")',
                method: 'GET',
                contentType: 'application/json',
                dataType: 'json',
                success: function (res) {
                    def.resolve(res);
                },
                error: function (err) {
                    def.reject(err);
                },
                failure: function (fail) {
                    def.reject(fail)
                }
            });
            return def.promise();
        }
        
    </script>
}